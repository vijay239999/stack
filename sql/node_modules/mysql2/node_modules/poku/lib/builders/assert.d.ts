import type assert from "assert";
import type { AssertPredicate } from "assert";
import type { ProcessAssertionOptions } from '../@types/assert.js';
export declare const createAssert: (nodeAssert: typeof assert) => ((value: unknown, message?: ProcessAssertionOptions["message"]) => void) & {
    ok: (value: unknown, message?: ProcessAssertionOptions["message"]) => void;
    equal: (actual: unknown, expected: unknown, message?: ProcessAssertionOptions["message"]) => void;
    deepEqual: (actual: unknown, expected: unknown, message?: ProcessAssertionOptions["message"]) => void;
    strictEqual: (actual: unknown, expected: unknown, message?: ProcessAssertionOptions["message"]) => void;
    deepStrictEqual: (actual: unknown, expected: unknown, message?: ProcessAssertionOptions["message"]) => void;
    doesNotMatch: (value: string, regExp: RegExp, message?: ProcessAssertionOptions["message"]) => void;
    doesNotReject: {
        (block: (() => Promise<unknown>) | Promise<unknown>, message?: ProcessAssertionOptions["message"]): Promise<void>;
        (block: (() => Promise<unknown>) | Promise<unknown>, error: AssertPredicate, message?: ProcessAssertionOptions["message"]): Promise<void>;
    };
    throws: {
        (block: () => unknown, message?: ProcessAssertionOptions["message"]): void;
        (block: () => unknown, error: AssertPredicate, message?: ProcessAssertionOptions["message"]): void;
    };
    doesNotThrow: {
        (block: () => unknown, message?: string | ProcessAssertionOptions["message"]): void;
        (block: () => unknown, error: AssertPredicate, message?: ProcessAssertionOptions["message"]): void;
    };
    notEqual: (actual: unknown, expected: unknown, message?: ProcessAssertionOptions["message"]) => void;
    notDeepEqual: (actual: unknown, expected: unknown, message?: ProcessAssertionOptions["message"]) => void;
    notStrictEqual: (actual: unknown, expected: unknown, message?: ProcessAssertionOptions["message"]) => void;
    notDeepStrictEqual: (actual: unknown, expected: unknown, message?: ProcessAssertionOptions["message"]) => void;
    match: (value: string, regExp: RegExp, message?: ProcessAssertionOptions["message"]) => void;
    ifError: (value: unknown, message?: ProcessAssertionOptions["message"]) => void;
    fail: (message?: ProcessAssertionOptions["message"]) => never;
    rejects: {
        (block: (() => Promise<unknown>) | Promise<unknown>, message?: ProcessAssertionOptions["message"]): Promise<void>;
        (block: (() => Promise<unknown>) | Promise<unknown>, error: AssertPredicate, message?: ProcessAssertionOptions["message"]): Promise<void>;
    };
};
