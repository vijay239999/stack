const express = require('express');
const cors = require('cors');
const mysql = require('mysql2/promise');

const app = express();
const port = 5000;

app.use(cors());
app.use(express.json());

const pool = mysql.createPool({
    host: 'localhost',
    user: 'root',
    password: 'Vv@_999999',
    database: 'userdata',
});

app.post('/register', async (req, res) => {
    try {
        const { username, email, phone_number, password } = req.body;
        const sql = 'INSERT INTO Users (username, email, phone_number, password) VALUES (?, ?, ?, ?)';
        const [result] = await pool.execute(sql, [username, email, phone_number, password]);
        res.json({ message: 'User registered successfully!', userId: result.insertId });
    } catch (err) {
        res.json({ error: err.message });
    }
});

app.post('/login', async (req, res) => {
    try {
        const { username, password } = req.body;
        console.log('Login request received:', { username, password });

        const sql = 'SELECT * FROM users WHERE username = ?';
        const [rows] = await pool.execute(sql, [username]);

        console.log('Database response:', rows);

        if (rows.length > 0) {
            const user = rows[0];
            console.log('User found:', user);

            if (user.password === password) {
                res.json({ message: 'Login successful!', user });
            } else {
                res.status(401).json({ message: 'Invalid credentials. Please try again.' });
            }
        } else {
            res.status(401).json({ message: 'Invalid credentials. Please try again.' });
        }
    } catch (err) {
        console.error('Error during login:', err.message);
        res.status(500).json({ error: err.message });
    }
});




app.put('/update/:id', async (req, res) => {
    try {
        const { id } = req.params;
        const { username, email, phone_number, password } = req.body;
        const sql = 'UPDATE Users SET username = ?, email = ?, phone_number = ?, password = ? WHERE id = ?';
        const [result] = await pool.execute(sql, [username, email, phone_number, password, id]);
        if (result.affectedRows === 0) {
            return res.status(404).json({ message: 'User not found.' });
        }
        res.json({ message: 'User updated successfully!' });
    } catch (err) {
        res.json({ error: err.message });
    }
});

app.delete('/delete/:id', async (req, res) => {
    try {
        const { id } = req.params;
        const sql = 'DELETE FROM Users WHERE id = ?';
        const [result] = await pool.execute(sql, [id]);
        if (result.affectedRows === 0) {
            return res.status(404).json({ message: 'User not found.' });
        }
        res.json({ message: 'User deleted successfully!' });
    } catch (err) {
        res.json({ error: err.message });
    }
});

app.get('/users', async (req, res) => {
    try {
        const sql = 'SELECT * FROM Users';
        const [results] = await pool.query(sql);
        res.json(results);
    } catch (err) {
        res.json({ error: err.message });
    }
});

app.listen(5000, () => {
    console.log(`Server running at http://localhost:5000`);
});
